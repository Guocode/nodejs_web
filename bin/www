#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('nodeweb:server');
var http = require('http');
var socketpool = {
    free:[],
    busy:[],
    allsock:function () {
        return this.free.concat(this.busy);
    },
    get frees(){
        return this.free;
    },
    set frees(socket){
        this.free.push(socket);
        // console.log("当前空闲socket连接数："+this.free.length+'\n'+"当前忙碌socket连接数："+this.busy.length);
    },
    set freem(socket){
        for(f in this.free){
            if(f!=socket){
                this.busy.push(this.free.pop(f));
            }
        }
        // console.log("当前空闲socket连接数："+this.free.length+'\n'+"当前忙碌socket连接数："+this.busy.length);
    },
    set discon(socket){
        for(var i=0;i<this.free.length;i++)
        {
            if(this.free[i]==socket)
            {
                this.free.splice(i,1);
                break;
            }
        }
        // console.log("当前空闲socket连接数："+this.free.length+'\n'+"当前忙碌socket连接数："+this.busy.length);
    },
    findpartner:function (socket,callback){
        for(var i=0;i<this.free.length;i++)
        {
            if(this.free[i]!=socket)
            {
                callback(this.free[i]);
                this.freem = socket;
                this.freem = this.free[i];
                return this.free[i];
            }
        }
        return null;
    }
};

// setInterval(function () {
//   console.log("当前socket连接数："+socketpool.free.length);
// },1000);
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var sock = require('../service/socketservice');
var io = sock(server,socketpool);
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
